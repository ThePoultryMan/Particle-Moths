plugins {
	id "fabric-loom" version "1.5-SNAPSHOT"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

Set<String> apiModules = [
		"fabric-api-base",
        "fabric-lifecycle-events-v1",
		"fabric-particles-v1",
		"fabric-registry-sync-v0",
		"fabric-networking-api-v1",
]

repositories {
	maven {
		name "Quilt"
		url "https://maven.quiltmc.org/repository/release"
	}
	maven {
		name "Quilt Snapshots"
		url "https://maven.quiltmc.org/repository/snapshot"
	}

	exclusiveContent {
		forRepository {
			maven {
				name "Modrinth"
				url "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		name "TerraformersMC"
		url "https://maven.terraformersmc.com/releases"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_build_number}:intermediary-v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	apiModules.forEach {
		include modImplementation(fabricApi.module(it, project.fabric_version))
	}

	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

	modImplementation include("maven.modrinth:midnightlib:${project.midnightlib_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {

	}
}
